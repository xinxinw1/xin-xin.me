extends ../layout.pug

block vars
  - title="Property-based testing vs example-based testing"
  - description=title

block content
  h1= title
  p.subtitle September 11, 2018

  :markdown
    Last term, from March to August 2018, I had an internship at [Stripe](https://stripe.com/), an online payment processing company based in San Francisco. I learned a lot of things at Stripe, but the thing I want to talk about today is *property-based testing*.

    Before we look at that though, let's go though unit testing more generally and take a look at some of the things people want out of their unit tests:

    ## Unit testing dreams

    1. **Test passes &#8594; Code is correct**: Ideally, we'd love to have the guarantee that if the tests pass then the code is correct. Of course, this is almost impossible to achieve in practice, but we want to get as close to this as possible.

    2. **Easy to write**: Developers are lazy and will write less thourough tests if testing is difficult or takes a long time.

    3. **Easy to maintain**: Unit tests are code as well, and like other kinds of code, it needs to be maintained, so keeping it organized, understandable, and easy to evolve is important.

    4. **Easy to find bug when test fails**: Good tests will make it easy to find the original bug when it fails and won't make you spend a lot of time interpreting the failure message.

    First, I will talk about example-based testing, which is the kind of tests that most people write, and look at how it stacks up in the four points mentioned above. Then, I will introduce property-based testing and look at how it compares to example-based testing. And finally, I will talk about where it is appropriate to use one approach vs the other and why.

    Note: I'm going to be using Scala for my examples here, but the ideas here will apply to other languages as well.
    
    ## Example-based testing

    Before this term, I only knew how to write what are called *example-based tests*. These are the tests most people write where you pass specific input examples to your program and assert that the output is some specific expected output.

    Suppose we wrote a Scala function to sort a list of integers:

    ```scala
    def sort(seq: Seq[Int]): Seq[Int] = {
      // some sorting logic
      ???
    }
    ```

    An example-based test for this function could look like this:

    ```scala
    test("sorts Seq(5, 2, 3) correctly") {
      sort(Seq(5, 2, 3)) shouldBe Seq(2, 3, 5)
    }
    ```

    We have a specific example input, `Seq(5, 2, 3)`, and we compare the output to a specific example output, `Seq(2, 3, 5)`.

    Now, how does this stack up in our unit testing dreams?
    
    ### Test passes &#8594; Code is correct

    Example-based testing does really badly in this respect. For example, this implementation will pass the unit test above:

    ```scala
    def sort(seq: Seq[Int]): Seq[Int] = {
      Seq(2, 3, 5)
    }
    ```

    Clearly, this doesn't correctly sort the input sequence. In fact, it's almost entirely useless. But if your only goal was to make the test pass, this would be the easiest way to do so.

    One "solution" might be to write more complex examples, but that still won't be able to differentiate between a correct solution and one with the test inputs and outputs hard-coded.

    ### Easy to write

    It's relatively easy to come up with one simple example and write a test that tests it. Unfortunately, a single example is almost never good enough, and you'll ideally want to write several examples. Writing several examples also involves thinking about what the edge cases are and whether your examples cover them. Since writing several examples with proper edge case coverage takes time, people often skip this step and just write one or two examples, which isn't enough to properly test the code.

    Also, if your input objects are somewhat large and complex, manually creating example instances of those objects by hand can be very time-consuming.

    ### Easy to maintain

    Writing multiple examples also means duplicating the test code for those examples, which is bad for maintainability. Fortunately, most unit-testing frameworks have a feature called *parameterized tests* [1] which makes this better by allowing you to store a table with all the examples and only write your test code once.

    Another thing that can make example based tests hard to maintain is when your input object is a large and complex structure, when a field is added to the input object, all the test objects will have to be updated to include the new field, even if what the test is testing has nothing to do with the added field.

    ### Easy to find bug when test fails

    This is one place where example-based testing is actually pretty good. If the output doesn't match the expected output, you'll have a nice, hand-constructed input that you can work with, and it will be easy to see where the actual output is different from expected, making it easy to debug the original program using the test.

    ## Property-based testing

    In contrast to example-based testing, with property-based testing, no examples are explicitly specified in the test. Instead, we assert that some properties or invariants about the output are true *for all possible input values*.

    For the sort function, only two properties are required:

    1. The output should have the same elements as the input

    2. Each element in the output should be less than or equal to the next element

    If both of these are true for all inputs, then we can guarantee that the sort function is correct. We can encode these properties as a property-based test:

    ```scala
    test("sort satisfies sorting properties") {
      forAll { (seq: Seq[Int]) =>
        // Sort the input
        val output = sort(seq)

        // 1. The output should have the same elements as the input
        output should contain theSameElementsAs seq
        
        // 2. Each element in the output should be less than or equal to the next element
        if (!seq.isEmpty) {
          for ((curr, next) <- output zip output.tail) {
            curr should be <= next
          }
        }
      }
    }
    ```

    Obviously, the testing framework can't test the infinitely many `Seq[Int]` inputs. Instead, it'll randomly generate a large number of `Seq[Int]` values to try, and the test passes if the properties are true for all the generated values.

    How does property-based testing stack up in our unit testing dreams?

    ### Test passes &#8594; Code is correct

    The property-based test is much better in this respect than the example-based test. We're testing the exact properties that define what it means to be sorted, so by definition, for a given generated test input, the test passes if and only if the output is correctly sorted.

    Since the test is run on many different inputs, if it passes on all of them, we can have a high confidence that the code is correct.

    The downside is that the property-based test may miss problems if it happens to not generate the right value to trigger it. This can be reduced by specifying that 100 or 1000 or even 10000 values are generated, but even then, there will be a lot of values that are never generated.

    ### Easy to write

    Writing property-based tests does involve more thinking to come up with invariants to use, which can make them harder to write. On the other hand, property-based testing frameworks automatically include edge case coverage in their input object generation rules, so you won't have to think as much about whether you've covered edge cases since the framework will do that for you if you use good invariants.

    If you have a large and complex input structure, most property-based testing frameworks provide helper functions that make it easy to generate random instances of the structure with random values filled in, recursively filling in any nested structures, making testing with large structures easier.

    The harder part is when the input has some conditions on it aside from its parameter type. If the input contains a structure where multiple fields depend on each other in some way, the input contains strings that have to follow a specific format, there are some numbers within the a structure that have to be in specific ranges, or some other conditions that prevent you from using the default value generators, property-based tests quickly become very difficult to write. With complex conditions on the input, the code that generates the input can become more complex than the code that is being tested.

    ### Easy to maintain

    With the test written as a general logical statement instead of a specific example, property-based tests are generally easier to read and understand as what the test is testing for won't be obscured by specific and sometimes special properties of a specific example input of an example-based tests. This makes property-based tests easier to maintain.

    Additionally, if the input of the function you are testing is a complex structure that you are only using some parts of, with a property-based test, the instance generator will automatically adapt if you add, update, or remove fields in the structure, so you won't have to update unit tests that aren't testing things relevant to the field you are changing, even if it is part of the same input object.

    ### Easy to find bug when test fails

    This can be one of the downsides of property-based testing depending on which framework you are using. Since the testing framework generates random values to test with, it might find a bug with a large randomly generated value when a much smaller value would have found the same bug. Fortunately, almost all property-based testing frameworks have a feature called *shrinking*. [2] When a property-based test fails, it doesn't just immediately report the failure with the first failed input. Instead, it follows a set of rules based on the type of the input to simplify the input and find the "smallest" input that still fails. With good shrinking rules, it can be almost as easy to find bugs with property-based tests as with example-based tests.

    Unfortunately, with complex input structures and complex custom generators, shrinking can often break. [3] This forces us to disable shrinking, making debugging any caught bugs very difficult.

    ## Conclusion

    Property-based testing can be very helpful and can test functions much more easily and thoroughly than example-based testing, such as with testing the sort function. This usually happens when invariants are easy to specify and input values are easy to generate using the default generators.

    When invariants are hard to specify or input values are difficult to generate, property-based tests can quickly become much harder to write. In those cases, example-based testing will be much more useful.

    ## References

    [1] Parameterizing tests. pytest. https://docs.pytest.org/en/latest/example/parametrize.html

    [2] Shrinking. PropEr Testing. https://propertesting.com/book_shrinking.html

    [3] Gen.suchThat not respected by shrinking after Gen.map. scalacheck issues on Github. https://github.com/rickynils/scalacheck/issues/129

